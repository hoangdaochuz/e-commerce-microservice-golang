version: 3

dotenv: [".env"]

tasks:
  backend:codegen:
    desc: Generate Go code from proto file
    vars:
      PROTO_FILE: "{{.CLI_ARGS}}"
    cmds:
      - |
        echo "Generating from {{.PROTO_FILE}}"

        SERVICE_DIR=$(echo {{.PROTO_FILE}} | cut -d'/' -f2)
        FILE_NAME=$(basename {{.PROTO_FILE}} .proto)
        OUT_DIR="apps/$SERVICE_DIR/api/$FILE_NAME"

        mkdir -p "$OUT_DIR"

        protoc \
          --proto_path=$(dirname {{.PROTO_FILE}}) \
          --go_out="$OUT_DIR" --go_opt=paths=source_relative \
          --go-grpc_out="$OUT_DIR" --go-grpc_opt=paths=source_relative \
          {{.PROTO_FILE}}

  backend:codegen:dgo:
    desc: Generate .d.go file from proto file
    vars:
      PROTO_FILE: "{{.CLI_ARGS}}"
    cmds:
      - |
        if [ -z "{{.PROTO_FILE}}" ]; then
          echo "Error: Please provide proto file path"
          echo "Usage: task backend:codegen:dgo -- apps/order/proto/order.proto"
          exit 1
        fi
        echo "Generating .d.go from {{.PROTO_FILE}}"
        SERVICE_DIR=$(echo {{.PROTO_FILE}} | cut -d'/' -f2)
        FILE_NAME=$(basename {{.PROTO_FILE}} .proto)
        OUT_FILE="apps/$SERVICE_DIR/api/$FILE_NAME/$FILE_NAME.d.go"
        go run pkg/codegen/cli/main.go -type=backend-contract -protofilePath={{.PROTO_FILE}} -dgoOutput="$OUT_FILE"
        echo "Generated: $OUT_FILE"
  
  frontend:codegen:service:
    desc: Generate TypeScript/React Query code frontend for specific service
    vars:
      outdir: '{{.outdir | default "./frontend/apis"}}'
      service: '{{.service | default "api-client"}}'
    cmds:
      - |
        echo "  📁 Output Directory: {{.outdir}}"
        echo "  📦 Service Name: {{.service}}"
        echo "🔄 Generating frontend code..."
        go run pkg/codegen/cli/main.go -outdir="{{.outdir}}" -service="{{.service}}"
  frontend:codegen:all:
    desc: Generate TypeScript/React Query code frontend for all services
    vars:
      outdir: '{{.outdir | default "./frontend/apis"}}'
    cmds:
      - |
        echo "  📁 Output Directory: {{.outdir}}"
        echo "🔄 Generating frontend code..."
        go run pkg/codegen/cli/main.go -outdir="{{.outdir}}"
  frontend:codegen:help:
    desc: Show help for frontend code generation
    cmds:
      - |
        echo "Frontend Code Generator Help"
        echo "============================"
        echo ""
        echo ""
        echo "Basic usage:"
        echo "  task frontend:codegen outdir=./my-frontend/api service=my-api"
        echo ""
        echo "Available parameters:"
        echo "  outdir  - Output directory (default: ./frontend/apis)"
        echo "  service - Service name for generated code (default: api-client)"
        echo ""
        echo "Examples:"
        echo "  task frontend:codegen service=ecommerce-api outdir=./frontend/generated"

  backend:build:nats_auth:
    desc: Build docker image for nats auth service
    vars:
      IMAGE: "{{.DOCKER_USERNAME}}/nats_auth"
      TAG: "0.1.45"
    cmds:
      - |
        echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USERNAME" --password-stdin
        docker build --no-cache  -f apps/nats_auth/Dockerfile -t {{.IMAGE}}:{{.TAG}} .
        docker push {{.IMAGE}}:{{.TAG}}

  backend:dev:
    desc: Run backend development server
    cmds:
      - rm -f pid.txt *.log
      - echo "# Backend Services PIDs" > pid.txt
      - task: go_apps

  go_apps:
    deps:
      - task: backend:api_gateway
        on_success: backend:order
      - task: backend:order
  backend:api_gateway:
    desc: Run api gateway service
    cmds:
      - |
        go build -o cmd/main cmd/main.go
        echo "Starting API Gateway..."
        ./cmd/main &
        sleep 1
        API_PID=$(pgrep -f "^./cmd/main$")
        echo "api_gateway:$API_PID" >> pid.txt
        echo "API Gateway started with PID: $API_PID"
        wait
  backend:order:
    desc: Run order service
    cmds:
      - |
        go build -o apps/order/cmd/main apps/order/cmd/main.go
        echo "Starting Order service..."
        ./apps/order/cmd/main &
        sleep 1
        ORDER_PID=$(pgrep -f "^./apps/order/cmd/main$")
        echo "order:$ORDER_PID" >> pid.txt
        echo "Order service started with PID: $ORDER_PID"
        wait
