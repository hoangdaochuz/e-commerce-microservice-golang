// Code generated by proto2dgo. DO NOT EDIT.

package order

import (
	"context"

	custom_nats "github.com/hoangdaochuz/ecommerce-microservice-golang/pkg/custom-nats"
	//
)

// NATS subject constants
const (
	NATS_SUBJECT = "/api/v1/order"
	
	
	ORDER_CREATE_ORDER = NATS_SUBJECT + "/CreateOrder"
	
	ORDER_GET_ORDER_BY_ID = NATS_SUBJECT + "/GetOrderById"
	
	
)

// Enum definitions



// OrderService defines the service interface
type OrderService interface {
	
	CreateOrder(ctx context.Context, req *CreateOrderRequest) (*CreateOrderResponse, error)
	
	GetOrderById(ctx context.Context, req *GetOrderByIdRequest) (*OrderResponse, error)
	
}

// OrderServiceProxy wraps the service implementation
type OrderServiceProxy struct {
	service OrderService
}

// NewOrderServiceProxy creates a new OrderServiceProxy instance
func NewOrderServiceProxy(service OrderService) *OrderServiceProxy {
	return &OrderServiceProxy{
		service: service,
	}
}


// CreateOrder delegates the call to the underlying service
func (p *OrderServiceProxy) CreateOrder(ctx context.Context, req *CreateOrderRequest) (*CreateOrderResponse, error) {
	return p.service.CreateOrder(ctx, req)
}

// GetOrderById delegates the call to the underlying service
func (p *OrderServiceProxy) GetOrderById(ctx context.Context, req *GetOrderByIdRequest) (*OrderResponse, error) {
	return p.service.GetOrderById(ctx, req)
}


// OrderServiceRouter handles NATS routing for OrderService service
type OrderServiceRouter struct {
	proxy *OrderServiceProxy
}

// NewOrderServiceRouter creates a new OrderServiceRouter instance
func NewOrderServiceRouter(proxy *OrderServiceProxy) *OrderServiceRouter {
	return &OrderServiceRouter{
		proxy: proxy,
	}
}

// Register registers all service methods with the NATS router
func (r *OrderServiceRouter) Register(natsRouter custom_nats.Router) {
	
	natsRouter.RegisterRoute("POST", ORDER_CREATE_ORDER, r.proxy.CreateOrder)
	
	natsRouter.RegisterRoute("POST", ORDER_GET_ORDER_BY_ID, r.proxy.GetOrderById)
	
}






